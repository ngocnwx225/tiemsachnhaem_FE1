// H√†m ti·ªán √≠ch ƒë·ªÉ t√¨m ph·∫ßn t·ª≠ ch·ª©a vƒÉn b·∫£n ch√≠nh x√°c
HTMLElement.prototype.contains = function (text) {
  return this.textContent.trim() === text;
};

let ordersData = []; // Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u d·ªØ li·ªáu t·ª´ API

// H√†m g·ªçi API ƒë·ªÉ l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (GET /orders)
async function fetchOrders() {
  try {
    const response = await fetch('https://tiemsachnhaem-be-mu.vercel.app/api/orders', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        // Th√™m token n·∫øu c·∫ßn
        // 'Authorization': 'Bearer your-token-here'
      }
    });

    if (!response.ok) {
      throw new Error(`L·ªói khi g·ªçi API: ${response.status} - ${response.statusText}`);
    }

    const data = await response.json();
    ordersData = data; // L∆∞u d·ªØ li·ªáu t·ª´ API
    renderOrdersTable(); // C·∫≠p nh·∫≠t b·∫£ng v·ªõi d·ªØ li·ªáu API
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API:', error);
    // N·∫øu API th·∫•t b·∫°i, gi·ªØ nguy√™n d·ªØ li·ªáu m·∫´u
    ordersData = [
      { _id: '#DH001', customerId: 'Nguy·ªÖn VƒÉn A', email: 'nguyenvana@example.com', createdAt: '2025-05-20', totalAmount: 850000, status: 'pending' },
      { _id: '#DH002', customerId: 'Tr·∫ßn Th·ªã B', email: 'tranthib@example.com', createdAt: '2025-05-18', totalAmount: 1200000, status: 'delivered' },
      { _id: '#DH003', customerId: 'L√™ VƒÉn C', email: 'levanc@example.com', createdAt: '2025-05-17', totalAmount: 720000, status: 'shipping' },
      { _id: '#DH004', customerId: 'Ph·∫°m Th·ªã D', email: 'phamthid@example.com', createdAt: '2025-05-16', totalAmount: 450000, status: 'cancelled' }
    ];
    renderOrdersTable(); // S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
  }
}

// H√†m hi·ªÉn th·ªã d·ªØ li·ªáu l√™n b·∫£ng
function renderOrdersTable() {
  const tbody = document.getElementById('ordersTableBody');
  const statusText = {
    'unresolved': 'Ch∆∞a gi·∫£i quy·∫øt',
    'pending': 'ƒêang x·ª≠ l√Ω',
    'shipping': 'ƒêang giao',
    'delivered': 'ƒê√£ giao',
    'cancelled': 'ƒê√£ h·ªßy'
  };

  tbody.innerHTML = ordersData.map(order => `
    <tr>
      <td>${order._id}</td>
      <td>
        <strong>${order.customerId}</strong><br>
        <small class="text-muted">${order.email || 'Ch∆∞a c√≥ email'}</small>
      </td>
      <td>${new Date(order.createdAt).toLocaleDateString('vi-VN')}</td>
      <td>${order.totalAmount.toLocaleString('vi-VN')}‚Ç´</td>
      <td><span class="badge rounded-pill status-${order.status}" id="status${order._id.slice(1)}">${statusText[order.status] || 'N/A'}</span></td>
      <td>
        <button class="btn btn-outline-primary btn-sm" onclick="showOrderDetail('${order._id}')">üëÅÔ∏è</button>
        <button class="btn btn-outline-danger btn-sm delete-btn" onclick="deleteOrder('${order._id}')">üóëÔ∏è</button>
      </td>
    </tr>
  `).join('');
}

// H√†m l·∫•y chi ti·∫øt ƒë∆°n h√†ng (GET /orders/{id})
async function showOrderDetail(orderCode) {
  try {
    // G·ªçi API GET /orders/{id} v·ªõi id l√† ph·∫ßn s·ªë c·ªßa orderCode (lo·∫°i b·ªè k√Ω t·ª± '#')
    const response = await fetch(`https://tiemsachnhaem-be-mu.vercel.app/api/orders/${orderCode.slice(1)}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        // Th√™m token n·∫øu c·∫ßn
        // 'Authorization': 'Bearer your-token-here'
      }
    });

    if (!response.ok) {
      throw new Error(`L·ªói khi g·ªçi API: ${response.status} - ${response.statusText}`);
    }

    const order = await response.json();
    // Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ API
    document.getElementById("orderCode").textContent = order._id || orderCode;
    document.getElementById("orderCustomer").textContent = order.customerId || 'Kh√¥ng x√°c ƒë·ªãnh';
    document.getElementById("orderEmail").textContent = order.email || 'Ch∆∞a c√≥ email';
    document.getElementById("orderPhone").textContent = order.phone || 'Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i';
    document.getElementById("orderAddress").textContent = order.address || 'Ch∆∞a c√≥ ƒë·ªãa ch·ªâ';
    document.getElementById("orderDate").textContent = new Date(order.createdAt).toLocaleDateString('vi-VN');
    document.getElementById("orderTotal").textContent = order.totalAmount ? order.totalAmount.toLocaleString('vi-VN') + '‚Ç´' : '0‚Ç´';
    document.getElementById("orderProducts").innerHTML = order.products
      .map(item => `
        <tr><td>${item.productId}</td><td>${item.quantity}</td><td>${item.price.toLocaleString('vi-VN')}‚Ç´</td></tr>
      `).join('');

    const currentStatus = order.status || 'pending';
    document.getElementById("orderStatusSelect").value = currentStatus;
    document.getElementById("orderStatus").textContent = statusText[currentStatus] || 'ƒêang x·ª≠ l√Ω';

    const myModal = new bootstrap.Modal(document.getElementById('orderModal'));
    myModal.show();
  } catch (error) {
    console.error('L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:', error);
    // Fallback v·ªÅ d·ªØ li·ªáu m·∫´u n·∫øu API th·∫•t b·∫°i
    const fallbackOrders = {
      '#DH001': { customer: 'Nguy·ªÖn VƒÉn A', email: 'nguyenvana@example.com', phone: '0901234567', address: '123 Nguy·ªÖn VƒÉn Linh, Qu·∫≠n 7, TP.HCM', date: '20/05/2025', total: '850,000‚Ç´' },
      '#DH002': { customer: 'Tr·∫ßn Th·ªã B', email: 'tranthib@example.com', phone: '0912345678', address: '456 L√™ L·ª£i, Qu·∫≠n 1, TP.HCM', date: '18/05/2025', total: '1,200,000‚Ç´' },
      '#DH003': { customer: 'L√™ VƒÉn C', email: 'levanc@example.com', phone: '0923456789', address: '789 Hai B√† Tr∆∞ng, Qu·∫≠n 3, TP.HCM', date: '17/05/2025', total: '720,000‚Ç´' },
      '#DH004': { customer: 'Ph·∫°m Th·ªã D', email: 'phamthid@example.com', phone: '0934567890', address: '101 Nguy·ªÖn Hu·ªá, Qu·∫≠n 5, TP.HCM', date: '16/05/2025', total: '450,000‚Ç´' }
    };
    const fallbackProducts = {
      '#DH001': [{ name: 'Dust', qty: 1, price: '365,000‚Ç´' }, { name: 'Cloud Atlas: 20th Anniversary Edition', qty: 1, price: '69,000‚Ç´' }],
      '#DH002': [{ name: 'Book A', qty: 2, price: '600,000‚Ç´' }],
      '#DH003': [{ name: 'Book B', qty: 1, price: '720,000‚Ç´' }],
      '#DH004': [{ name: 'Book C', qty: 1, price: '450,000‚Ç´' }]
    };
    const order = fallbackOrders[orderCode] || ordersData.find(o => o._id === orderCode) || { customer: 'Kh√¥ng x√°c ƒë·ªãnh', email: 'Ch∆∞a c√≥ email', date: 'Ch∆∞a c√≥ ng√†y', total: '0‚Ç´' };
    document.getElementById("orderCode").textContent = orderCode;
    document.getElementById("orderCustomer").textContent = order.customer || order.customerId || 'Kh√¥ng x√°c ƒë·ªãnh';
    document.getElementById("orderEmail").textContent = order.email || 'Ch∆∞a c√≥ email';
    document.getElementById("orderPhone").textContent = order.phone || 'Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i';
    document.getElementById("orderAddress").textContent = order.address || 'Ch∆∞a c√≥ ƒë·ªãa ch·ªâ';
    document.getElementById("orderDate").textContent = order.date || new Date(order.createdAt || '2025-05-29').toLocaleDateString('vi-VN');
    document.getElementById("orderTotal").textContent = order.total || (order.totalAmount ? order.totalAmount.toLocaleString('vi-VN') + '‚Ç´' : '0‚Ç´');
    document.getElementById('orderProducts').innerHTML = (fallbackProducts[orderCode] || order.products?.map(p => ({ name: p.productId, qty: p.quantity, price: p.price.toLocaleString('vi-VN') + '‚Ç´' })) || [])
      .map(item => `
        <tr><td>${item.name}</td><td>${item.qty}</td><td>${item.price}</td></tr>
      `).join('');

    const statusElement = document.getElementById(`status${orderCode.slice(1)}`);
    const currentStatus = statusElement ? statusElement.classList[2].split('-')[1] : (order.status || 'pending');
    document.getElementById("orderStatusSelect").value = currentStatus;
    document.getElementById("orderStatus").textContent = statusElement ? statusElement.textContent : statusText[currentStatus] || 'ƒêang x·ª≠ l√Ω';

    const myModal = new bootstrap.Modal(document.getElementById('orderModal'));
    myModal.show();

    if (error.message.includes('404')) {
      alert('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!');
    } else if (error.message.includes('401')) {
      alert('Unauthorized! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    } else {
      alert('Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt ƒë∆°n h√†ng. D·ªØ li·ªáu m·∫´u s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã.');
    }
  }
}

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (PUT /orders/{id})
async function updateOrderStatus() {
  const orderCode = document.getElementById("orderCode").textContent;
  const status = document.getElementById("orderStatusSelect").value;
  const statusText = {
    'unresolved': 'Ch∆∞a gi·∫£i quy·∫øt',
    'pending': 'ƒêang x·ª≠ l√Ω',
    'shipping': 'ƒêang giao',
    'delivered': 'ƒê√£ giao',
    'cancelled': 'ƒê√£ h·ªßy'
  }[status];

  try {
    // L·∫•y th√¥ng tin hi·ªán t·∫°i c·ªßa ƒë∆°n h√†ng ƒë·ªÉ gi·ªØ nguy√™n c√°c tr∆∞·ªùng kh√°c
    const order = ordersData.find(o => o._id === orderCode);
    if (!order) {
      throw new Error('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng trong d·ªØ li·ªáu hi·ªán t·∫°i!');
    }

    // T·∫°o body request v·ªõi th√¥ng tin c·∫≠p nh·∫≠t
    const updatedOrder = {
      _id: order._id,
      customerId: order.customerId,
      products: order.products || [],
      totalAmount: order.totalAmount || 0,
      status: status, // Tr·∫°ng th√°i m·ªõi
      createdAt: order.createdAt || new Date().toISOString(),
      ISBN: order.ISBN || ''
    };

    // G·ªçi API PUT /orders/{id}
    const response = await fetch(`https://tiemsachnhaem-be-mu.vercel.app/api/orders/${orderCode.slice(1)}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        // Th√™m token n·∫øu c·∫ßn
        // 'Authorization': 'Bearer your-token-here'
      },
      body: JSON.stringify(updatedOrder)
    });

    if (!response.ok) {
      throw new Error(`L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng: ${response.status} - ${response.statusText}`);
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i tr√™n b·∫£ng ch√≠nh
    const statusElement = document.getElementById(`status${orderCode.slice(1)}`);
    if (statusElement) {
      statusElement.textContent = statusText;
      statusElement.className = `badge rounded-pill status-${status}`;
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong modal
    document.getElementById("orderStatus").textContent = statusText;

    // Hi·ªÉn th·ªã popup th√†nh c√¥ng
    document.getElementById("successTitle").textContent = "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng";
    document.getElementById("successMessage").textContent = `Tr·∫°ng th√°i ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh: ${statusText}`;
    const popup = document.getElementById("successOverlay");
    popup.style.display = "flex";

    // ƒê√≥ng modal chi ti·∫øt ƒë∆°n h√†ng
    const modalElement = document.getElementById('orderModal');
    const modalInstance = bootstrap.Modal.getInstance(modalElement);
    modalInstance.hide();

    // L√†m m·ªõi danh s√°ch ƒë∆°n h√†ng
    await fetchOrders();
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:', error);
    // C·∫≠p nh·∫≠t giao di·ªán ngay c·∫£ khi API th·∫•t b·∫°i
    const statusElement = document.getElementById(`status${orderCode.slice(1)}`);
    if (statusElement) {
      statusElement.textContent = statusText;
      statusElement.className = `badge rounded-pill status-${status}`;
    }
    document.getElementById("orderStatus").textContent = statusText;
    document.getElementById("successTitle").textContent = "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng";
    document.getElementById("successMessage").textContent = `Tr·∫°ng th√°i ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh: ${statusText} (l∆∞u √Ω: c√≥ l·ªói khi g·ª≠i l√™n server)`;
    const popup = document.getElementById("successOverlay");
    popup.style.display = "flex";
    const modalElement = document.getElementById('orderModal');
    const modalInstance = bootstrap.Modal.getInstance(modalElement);
    modalInstance.hide();

    if (error.message.includes('404')) {
      alert('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!');
    } else if (error.message.includes('400')) {
      alert('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i.');
    } else if (error.message.includes('401')) {
      alert('Unauthorized! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    } else {
      alert('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau!');
    }
  }
}

// H√†m x√≥a ƒë∆°n h√†ng (DELETE /orders/{id})
async function deleteOrder(orderCode) {
  if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë∆°n h√†ng ${orderCode}?`)) {
    try {
      const response = await fetch(`https://tiemsachnhaem-be-mu.vercel.app/api/orders/${orderCode.slice(1)}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          // Th√™m token n·∫øu c·∫ßn
          // 'Authorization': 'Bearer your-token-here'
        }
      });

      if (!response.ok) {
        throw new Error(`L·ªói khi x√≥a ƒë∆°n h√†ng: ${response.status} - ${response.statusText}`);
      }

      // Hi·ªÉn th·ªã popup th√†nh c√¥ng
      document.getElementById("successTitle").textContent = "X√≥a ƒë∆°n h√†ng";
      document.getElementById("successMessage").textContent = `ƒê∆°n h√†ng ${orderCode} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`;
      const popup = document.getElementById("successOverlay");
      popup.style.display = "flex";

      // L√†m m·ªõi danh s√°ch ƒë∆°n h√†ng
      await fetchOrders();
    } catch (error) {
      console.error('L·ªói khi x√≥a ƒë∆°n h√†ng:', error);
      if (error.message.includes('404')) {
        alert('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!');
      } else if (error.message.includes('401')) {
        alert('Unauthorized! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      } else if (error.message.includes('500')) {
        alert('L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else {
        alert('Kh√¥ng th·ªÉ x√≥a ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau!');
      }
    }
  }
}

function closeSuccessPopup(event) {
  const popup = document.getElementById("successOverlay");
  if (event && !event.target.closest('.success-popup')) {
    popup.style.display = "none";
  } else if (!event) {
    popup.style.display = "none";
  }
}

// H√†m t·∫°o ƒë∆°n h√†ng m·ªõi (POST /orders)
window.createOrder = async function () {
  try {
    const customerId = document.getElementById('createCustomerId').value;
    const productId = document.getElementById('createProductId').value;
    const quantity = parseInt(document.getElementById('createQuantity').value);
    const price = parseInt(document.getElementById('createPrice').value);
    const totalAmount = parseInt(document.getElementById('createTotalAmount').value);
    const status = document.getElementById('createStatus').value;

    if (!customerId || !productId || !quantity || !price || !totalAmount) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
      return;
    }

    const newOrder = {
      _id: `#DH${Math.floor(Math.random() * 1000 + 5).toString().padStart(3, '0')}`, // T·∫°o ID ng·∫´u nhi√™n
      customerId,
      products: [{ productId, quantity, price }],
      totalAmount,
      status,
      createdAt: new Date().toISOString(),
      ISBN: ''
    };

    const response = await fetch('https://tiemsachnhaem-be-mu.vercel.app/api/orders', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // Th√™m token n·∫øu c·∫ßn
        // 'Authorization': 'Bearer your-token-here'
      },
      body: JSON.stringify(newOrder)
    });

    if (!response.ok) {
      throw new Error(`L·ªói khi t·∫°o ƒë∆°n h√†ng: ${response.status} - ${response.statusText}`);
    }

    alert('T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng!');
    const createModal = bootstrap.Modal.getInstance(document.getElementById('createOrderModal'));
    createModal.hide();

    // L√†m m·ªõi danh s√°ch ƒë∆°n h√†ng
    await fetchOrders();
  } catch (error) {
    console.error('L·ªói khi t·∫°o ƒë∆°n h√†ng:', error);
    if (error.message.includes('400')) {
      alert('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i.');
    } else if (error.message.includes('401')) {
      alert('Unauthorized! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    } else {
      alert('Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau!');
    }
  }
};

// Kh·ªüi t·∫°o khi trang t·∫£i
document.addEventListener("DOMContentLoaded", function () {
  const popup = document.getElementById("successOverlay");
  popup.style.display = "none";
  fetchOrders(); // G·ªçi API khi trang t·∫£i
});

function toggleSidebar() {
  const sidebar = document.querySelector('.sidebar');
  sidebar.classList.toggle('active');
}